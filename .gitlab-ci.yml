stages:
  - build
  - test

cache:
  paths:
    - ~/.cache/pip/

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_SLUG
  IMAGE_NAME_NGINX: $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_SLUG

build-docker-image:
  stage: build
  tags:
    - docker-cli
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker pull $IMAGE_NAME || /bin/true
    - docker build --pull -f deployment/django/Dockerfile -t $IMAGE_NAME .
    - docker push $IMAGE_NAME

build-docker-image-nginx:
  stage: build
  tags:
    - docker-cli
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker pull $IMAGE_NAME || /bin/true  # sic
    - docker build --pull -f deployment/nginx/Dockerfile -t $IMAGE_NAME_NGINX .
    - docker push $IMAGE_NAME_NGINX

testing:
  image: $IMAGE_NAME
  tags:
    - docker
  stage: test
  variables:
    DJANGO_DEBUG: 'True'
    DATABASE_URL: 'sqlite:////tmp/test.db'
  before_script:
    - python -V
    - pip install -r requirements/testing.txt
    - cd src
    - wget -O bundle.zip https://dev.cryptec.at/root/brevlada/-/jobs/artifacts/master/download?job=build
    - unzip bundle.zip
    - mkdir bundle
    - cp -r dist/* bundle
  script:
    - pytest --cov-report term --junitxml=../report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml
